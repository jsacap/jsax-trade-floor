import os
import sqlite3
import datetime as dt
import requests
import pandas as pd
import streamlit as st
import streamlit_extras
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
st.set_page_config(page_title='JSAX Trade',
                   layout='wide',
                   page_icon='https://jsax.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fba07c969-ad44-4ac9-b475-1585436607ee%2FUntitled.png?table=block&id=8570f62a-2323-4bbd-ba98-e9043c3fa20b&spaceId=a34bbc1a-8979-401d-ac95-4dc80e288722&width=2000&userId=&cache=v2')
from streamlit_extras.app_logo import add_logo
from streamlit_extras.dataframe_explorer import dataframe_explorer




# ---- Page description ----
cl1, cl2, cl3 = st.columns(3)
with cl1:
    st.write(' ')
with cl2:
    st.image('https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8587d9d9-ebba-474d-bbe3-2220a86e95be%2FUntitled.png?table=block&id=92875c04-e03b-4599-abf2-b810d8ea04df&spaceId=a34bbc1a-8979-401d-ac95-4dc80e288722&width=2000&userId=e094dc45-70bb-460a-8bf7-97e454446eca&cache=v2', width=800)
with cl3: 
    st.write(' ')
add_logo('https://raw.githubusercontent.com/jsacap/jsax-trade-floor/master/coin_logo.png')
st.title('Performance Report')

# ---- Hide ST HTML ----
hide_st_style = """
        <style>
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        header {visibility: hidden;}
        </style>
"""
st.markdown(hide_st_style, unsafe_allow_html=True)


# GitHub raw content URLs
base_url = "https://raw.githubusercontent.com/jsacap/jsax-trade-floor/master/"
csv_url = base_url + "trades.csv"
db_url = base_url + "trades.db"
db_filename = 'trades.db'
db_path = os.path.abspath(db_filename)

def load_data():
    if os.path.exists(db_path):
        conn = sqlite3.connect(db_path)
    else:
        conn = sqlite3(db_url)
    query = "SELECT * FROM trades"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

df = load_data()

 

# Convert to date
df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')

st.write(f"""
Welcome to the performance report. This report is automatically generated by pulling trades from the database, dissecting the information, and presenting it in a readable format for traders to understand.

The report is divided into multiple sections to provide a detailed analysis of trade statistics. This analysis can help identify patterns for us to exploit and improve our trading edge.

                           
""")

# Prepping the choices for months
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
df['Month'] = df['Date'].dt.strftime('%B %Y')
available_months = df['Month'].unique()
available_months = ['Overall Performance'] + list(available_months)

# Add a multiselect to choose month of report
selected_month = st.selectbox("Select a Report", available_months)

#Filtering df acording to month selected. (Overall Performance is the entire df)
if selected_month == 'Overall Performance':
    selected_df = df
else:
    selected_df = df[df['Month'].isin(selected_month)]

# Variables for the Overall report
overall_r = df['R'].sum()
wins = df.loc[df['R'] > 0]
top_wins = wins.nlargest(3, 'R')
top_asset = top_wins['Asset'].values[0]
top_asset_r = top_wins['R'].values[0]
trading_session_r = df.groupby('Trading Session')['R'].sum()
trading_session_r = trading_session_r.sort_values(ascending=False)
top_session = trading_session_r.index[0]
top_session_r = trading_session_r.values[0]



# Drawdown calculation
largest_drawdown = 0
peak_value = df['Rolling R'].iloc[0]
for index, row in df.iterrows():
    if row['Rolling R'] > peak_value:
        peak_value = row['Rolling R']
    else:
        drawdown = peak_value - row['Rolling R']
        largest_drawdown = max(largest_drawdown, drawdown)


#Overall report
if selected_month == 'Overall Performance':
    st.write(f"""
        # Overview
        This is the {selected_month} report.
        The total gain (in R multiple) in the course of the entire trading performance from the trades in tracked from the database is {overall_r}. 
        During this period, the largest drawdown experienced was at {largest_drawdown}.
        The strongest trade was the {top_asset} returning a total of {top_asset_r}! 
        This was executed through a {top_wins['System Strategy'].values[0]} entering at
        the {top_wins['Trade From'].values[0]} structure.
        Trades executed during the {top_session} session has been most prfitable 
        returning a total of {top_session_r}R whereas the weakest session was the 
        {trading_session_r.index[2]} with a return of {trading_session_r.values[2]}. 
        Trades during the {trading_session_r.index[1]} came in at second returning {trading_session_r.values[1]}R.
        Here are a couple charts to plot the overview.
""")
